API Introduction
Users are welcome to make use of this WEEX API developer documentation.

This document serves as the official reference for WEEX API features which are continuously being updated. Check back regularly for updates!

You can switch between the different API operations by clicking on the top menu. The documentation language can be changed via the language button in the upper right corner.

Request parameters and response result examples are provided on the right side of the documentation.

Previous
Update log
Market Making/Quantitative Trading
We welcome institutional partners with proven market-making strategies and substantial trading volumes to join our Market Maker Program.To apply, please provide the following information in an email to us:

support@weex.com (for market maker application)

Your UID (ensure no commission affiliations exist for this UID)

Screenshots as proof of 30-day market-making volume from other exchanges

A brief description of your market-making strategy (no details required)

FAQ
Q1：How to get API support?

A : Join our official API support group and our admins will answer your questions.https://t.me/weex_group

Q2：Should I use BTCUSDT_SPBL or BTCUSDT for the symbol parameter？

A : The symbol parameter for all order APIs should use the values returned by the /products interface.

Q3：What is the rate limit of API?

A : 1. The rate limit of each API endpoint is marked on the doc page;2. The rate limit of each API interface is calculated independently;

Q4: Are symbols case-sensitive in API endpoints?

A: Yes. Symbols are case-sensitive and must be in all uppercase letters.

If I forget the passphrase of API key, What should I do?

A: The passphrase of API Key can not be modified, please recreate your API Key.

Preparation
To use the API, please log in to the web platform, create and configure API keys with proper permissions, then proceed with development and trading as detailed in this documentation.

Click here to create an API Key.

Each user can create up to 10 API Key groups. Each key can be configured for "Read" and/or "Trade" permissions.

Permission details:

Read permission: for data queries such as market data.
Trade permission: enables order placement, cancellation, and related actions.
After creating an API Key, securely store the following:

APIKey — The unique identifier for API authentication which is algorithmically generated.
SecretKey — The system-generated private key for signature encryption.
Passphrase —A user-defined access phrase. Note: If lost, the Passphrase cannot be recovered. You must create a new API key.
tip
You can bind IP addresses to API keys when creating API keys. Unrestricted API keys (with no IP address binding) pose security risks.

warning
Risk warning: These three keys directly impact account security. Never share your Passphrase. Losing any of these keys may result in asset loss. Delete compromised API keys immediately.
API Types
This section categorizes APIs into two types:

Public APIs
Private APIs
Public APIs

Public APIs allow users to retrieve configuration and market data.These requests do not require authentication.

Private APIs

Private APIs enable order management and account management.Each private request must be authenticated using a standardized signature method.

Private APIs require validation with your API key.

Access Restrictions
This section outlines access restrictions:

Rest API: Returns the "429 Too Many Requests" status if the frequency limit is exceeded.
Rest API

Requests with valid API keys are rate-limited by the API key. Requests without API keys are rate-limited by the public IP address.

Rate limiting rules: The default limit is 10 requests/second unless specified otherwise in individual endpoint documentation.

Special note for batch orders: Placing a batch order comprised of 4 trading pairs with 10 orders each counts as 1 request.

Previous
API Types
API Public Parameters
side(order direction)

Field	Description
sell	Sell order
buy	Buy order
orderType (Order Type)

Field	Description
limit	Limit order
market	Market order
force (Order Type)

Field	Description
normal	Default order, no special controls needed
postOnly	Post-only order
fok	Fill-Or-Kill order
ioc	Immediate-Or-Cancel order
status (Order Status)

Field	Description
new	Unfilled
partial_fill	Partially filled
full_fill	All Filled
cancelled	Canceled
groupType (Major transaction types)

Field	Description
deposit	Deposit
withdraw	Withdraw
transaction	Trade
transfer	Transfer
other	Others
bizType (Account capital flow operation type)

Field	Description
deposit	Deposit
withdraw	Withdraw
buy	Buy
sell	Sell
transfer-in	Inbound transfer
transfer-out	Outbound transfer
status (Order status)

Field	Description
cancel	Canceled
reject	Rejected
success	Success
wallet-fail	Wallet failed
wallet-processing	Wallet is processing
first-audit	First review
recheck	Second review
first-reject	First review rejected
recheck-reject	Second review rejected
type (Withdrawal address query)

Field	Description
chain-on	On-chain
inner-transfer	Internal address
accountType (Account type)

Not case-sensitive

Field	Description
EXCHANGE	Spot account
OTC_SGD	OTC account
CONTRACT	Futures account
USD_MIX	Quanto swap account
USDT_MIX	USDT-M perpetual futures account
Candlestick intervals (granularity)

1min (1 minute)
5min (5 minutes)
15min (15 minutes)
30min (30 minutes)
1h (1 hour)
4h (4 hours)
12h (12 hours)
1day (1 day)
1week (1 week)


API Domain
You can use different domain as below Rest API.

Domain Name	API	Description
Spot REST Domain	https://api-spot.weex.com	Main Domain
Contract REST Domain	https://api-contract.weex.com	Main Domain
Signature
The ACCESS-SIGN request header is generated by using the HMAC SHA256 method encryption on the timestamp + method.toUpperCase() + requestPath + "?" + queryString + body string (+ denotes string concatenation), and putting the result through BASE64 encoding.

Signature Field Description

timestamp: This matches the ACCESS-TIMESTAMP header.
method: The request method (POST/GET), with all letters in uppercase.
requestPath: API endpoint path.
queryString: The query parameters after the "?" in the URL.
body: The string that corresponds to the request body (omitted if empty, typically for GET requests).
Signature format rules if queryString is empty

timestamp + method.toUpperCase() + requestPath + body
Signature format rules if queryString is not empty

timestamp + method.toUpperCase() + requestPath + "?" + queryString + body
Examples

Fetching market depth, using BTCUSDT as an example:

Timestamp = 1591089508404
Method = "GET"
requestPath = "/api/v2/market/depth"
queryString= "?symbol=btcusdt_spbl&limit=20"
Generate the string to be signed:

'1591089508404GET/api/v2/market/depth?symbol=btcusdt_spbl&limit=20'
Placing an order, using BTCUSDT_SPBL as an example:

Timestamp = 1561022985382

Method = "POST"

requestPath = "/api/v2/order/order"

body =

{"symbol":"btcusdt_spbl","quantity":"8","side":"buy","price":"1","orderType":"limit","clientOrderId":"ww#123456"}


Generate the string to be signed:

'1561022985382POST/api/spotPro/v3/order/order{"symbol":"btcusdt_spbl","size":"8","side":"buy","price":"1","orderType":"limit","clientOrderId":"ww#123456"}'


Steps to generate the final signature

Encrypt the unsigned string with HMAC SHA256 using your secretKey
Signature = hmac_sha256(secretkey, Message)
Encode the signature using Base64
Signature = base64.encode(Signature)


Request Processing
Java
Python
import time
import hmac
import hashlib
import base64
import requests
import json

api_key = ""
secret_key = ""
access_passphrase = ""


def generate_signature(secret_key, timestamp, method, request_path, query_string, body):
message = timestamp + method.upper() + request_path + query_string + str(body)
signature = hmac.new(secret_key.encode(), message.encode(), hashlib.sha256).digest()
# print(base64.b64encode(signature).decode())
return base64.b64encode(signature).decode()


def generate_signature_get(secret_key, timestamp, method, request_path, query_string):
message = timestamp + method.upper() + request_path + query_string
signature = hmac.new(secret_key.encode(), message.encode(), hashlib.sha256).digest()
# print(base64.b64encode(signature).decode())
return base64.b64encode(signature).decode()


def send_request_post(api_key, secret_key, access_passphrase, method, request_path, query_string, body):
timestamp = str(int(time.time() * 1000))
# print(timestamp)
body = json.dumps(body)
signature = generate_signature(secret_key, timestamp, method, request_path, query_string, body)

    headers = {
        "ACCESS-KEY": api_key,
        "ACCESS-SIGN": signature,
        "ACCESS-TIMESTAMP": timestamp,
        "ACCESS-PASSPHRASE": access_passphrase,
        "Content-Type": "application/json",
        "locale": "zh-CN"
    }

    url = "https://contract-openapi.weex.com"  # Please replace with the actual API address
    if method == "GET":
        response = requests.get(url + request_path, headers=headers)
    elif method == "POST":
        response = requests.post(url + request_path, headers=headers, data=body)
    return response

def send_request_get(api_key, secret_key, access_passphrase, method, request_path, query_string):
timestamp = str(int(time.time() * 1000))
# print(timestamp)
signature = generate_signature_get(secret_key, timestamp, method, request_path, query_string)

    headers = {
        "ACCESS-KEY": api_key,
        "ACCESS-SIGN": signature,
        "ACCESS-TIMESTAMP": timestamp,
        "ACCESS-PASSPHRASE": access_passphrase,
        "Content-Type": "application/json",
        "locale": "zh-CN"
    }

    url = "https://contract-openapi.weex.com"  # Please replace with the actual API address
    if method == "GET":
        response = requests.get(url + request_path, headers=headers)
    return response


# Example of calling a GET request
request_path = "/api/spot/v1/account/assets"
# request_path = "/api/spot/v1/public/currencies"
query_string = ''
body = ''
response = send_request_get(api_key, secret_key, access_passphrase, "GET", request_path, query_string)

# Example of calling a POST request
# request_path = "/api/spot/v1/trade/fills"
# body = {"symbol": "ETHUSDT_SPBL", "limit": "2"}
# query_string = ""
# response = send_request_post(api_key, secret_key, access_passphrase, "POST", request_path, query_string, body)

print(response.status_code)
print(response.text)


All requests are based on the HTTPS protocol. The Content-Type in the request headers must be set to 'application/json'.

Request Processing

Request parameters: Parameter encapsulation according to endpoint request parameter specification.
Submit request: Submit the encapsulated parameters to the server via GET/POST.
Server response: The server first performs security checks on the request data, and after passing the check, returns the response data to the user in the JSON format based on the operation logic.
Data processing: Process the server response data.
Success

HTTP 200 status codes indicates success and may contain content.Response content (if any) will be included in the returned data.

Common error codes

400 Bad Request – Invalid request format
401 Unauthorized – Invalid API Key
403 Forbidden – You do not have access to the requested resource
404 Not Found — No requests found
429 Too Many Requests – Rate limit exceeded
500 Internal Server Error – We had a problem with our server
Failed responses include error descriptions in the body.
Standard Specifications
Timestamp

The ACCESS-TIMESTAMP in request signatures is in milliseconds.Requests are rejected if the timestamp deviates by over 30 seconds from the API server time. If the local server time deviates significantly from the API server time, we recommend updating the HTTP header by querying the API server time.

Rate limiting rules

Too frequent requests will be rate-limited automatically and return the 429 status code in the HTTP header.

Public endpoints (such as market data endpoints): Uniform frequency of up to 20 requests per 2 seconds.
Authorization endpoints: Rate limits are based on the API key (see endpoint-specific rules).
Request formats

Only two request methods are supported: GET and POST

GET: Parameters are sent via queryString in the path to the server.
POST: Parameters are sent as a JSON-formatted body to the server.
Get Server Time
HTTP Request Retrieve the server's current timestamp.

GET /api/v2/public/time
Rate limit: 20 requests/second

Request parameters

NONE

Request example

curl "https://api-spot.weex.com/api/v2/public/time"


Response parameters

Field Name	Type	Field Description
data	Long	Server time
Response example

{
    "code": "00000",
    "msg": "success",
    "requestTime": 1622097118135,
    "data": 1622097118134
}