<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\weex as Exchange;
use ccxt\ExchangeError;
use ccxt\ArgumentsRequired;
use \React\Async;
use \React\Promise\PromiseInterface;

class weex extends Exchange {

    public function describe(): mixed {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'weex',
            'name' => 'WEEX',
            'countries' => array( 'SC' ), // Seychelles
            'rateLimit' => 100,
            'version' => 'v2',
            'certified' => false,
            'pro' => true,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'borrowCrossMargin' => false,
                'borrowIsolatedMargin' => false,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'cancelOrders' => true,
                'closeAllPositions' => false,
                'closePosition' => false,
                'createDepositAddress' => false,
                'createLimitBuyOrder' => true,
                'createLimitSellOrder' => true,
                'createMarketBuyOrder' => true,
                'createMarketOrderWithCost' => true,
                'createMarketSellOrder' => true,
                'createOrder' => true,
                'createOrders' => true,
                'createOrderWithTakeProfitAndStopLoss' => false,
                'createPostOnlyOrder' => true,
                'createReduceOnlyOrder' => false,
                'createStopLimitOrder' => false,
                'createStopLossOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'createTakeProfitOrder' => false,
                'createTrailingPercentOrder' => false,
                'createTriggerOrder' => false,
                'editOrder' => false,
                'fetchBalance' => true,
                'fetchBidsAsks' => false,
                'fetchBorrowInterest' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchClosedOrders' => false,
                'fetchCurrencies' => true,
                'fetchDepositAddress' => false,
                'fetchDepositAddresses' => false,
                'fetchDeposits' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchL2OrderBook' => false,
                'fetchLastPrices' => false,
                'fetchLedger' => true,
                'fetchMarkets' => true,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenInterest' => false,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrders' => true,
                'fetchOrderTrades' => false,
                'fetchPosition' => false,
                'fetchPositions' => false,
                'fetchPositionsRisk' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchStatus' => true,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchTransfers' => true,
                'fetchWithdrawals' => false,
                'reduceMargin' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'setPositionMode' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'timeframes' => array(
                '1m' => '1m',
                '5m' => '5m',
                '15m' => '15m',
                '30m' => '30m',
                '1h' => '1h',
                '2h' => '2h',
                '4h' => '4h',
                '6h' => '6h',
                '8h' => '8h',
                '12h' => '12h',
                '1d' => '1day',
                '1w' => '1week',
                '1M' => '1M',
            ),
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/85734211-85755480-b705-11ea-8b35-0b7f1db33a2f.jpg',
                'api' => array(
                    'public' => 'https://api-spot.weex.com/api/v2',
                    'private' => 'https://api-spot.weex.com/api/v2',
                ),
                'www' => 'https://www.weex.com',
                'doc' => array(
                    'https://doc-en.weex.com',
                    'https://github.com/weex-exchange',
                ),
                'fees' => 'https://www.weex.com/fees',
                'referral' => null,
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'public/time' => 1,
                        'public/currencies' => 1,
                        'public/products' => 1,
                        'public/exchangeInfo' => 1,
                        'market/ticker' => 1,
                        'market/tickers' => 1,
                        'market/fills' => 1,
                        'market/candles' => 1,
                        'market/depth' => 1,
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'account/assets' => 1,
                        'account/transferRecords' => 1,
                    ),
                    'post' => array(
                        'account/bills' => 1,
                        'trade/orders' => 1,
                        'trade/batch-orders' => 1,
                        'trade/cancel-order' => 1,
                        'trade/cancel-batch-orders' => 1,
                        'trade/cancel-symbol-order' => 1,
                        'trade/orderInfo' => 1,
                        'trade/open-orders' => 1,
                        'trade/history' => 1,
                        'trade/fills' => 1,
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => $this->parse_number('0.001'),
                    'taker' => $this->parse_number('0.001'),
                ),
            ),
            'precisionMode' => TICK_SIZE,
            'exceptions' => array(
                'exact' => array(
                    '40001' => '\\ccxt\\AuthenticationError', // Header "ACCESS_KEY" is required
                    '40002' => '\\ccxt\\AuthenticationError', // Header "ACCESS_SIGN" is required
                    '40003' => '\\ccxt\\AuthenticationError', // Header "ACCESS_TIMESTAMP" is required
                    '40005' => '\\ccxt\\InvalidNonce', // Invalid ACCESS_TIMESTAMP
                    '40006' => '\\ccxt\\AuthenticationError', // Invalid ACCESS_KEY
                    '40007' => '\\ccxt\\BadRequest', // Invalid Content_Type, use "application/json" format
                    '40008' => '\\ccxt\\InvalidNonce', // Request timestamp expired
                    '40009' => '\\ccxt\\AuthenticationError', // API verification failed
                    '40011' => '\\ccxt\\AuthenticationError', // Header "ACCESS_PASSPHRASE" is required
                    '40012' => '\\ccxt\\AuthenticationError', // Incorrect API key/Passphrase
                    '40013' => '\\ccxt\\AccountSuspended', // Account frozen
                    '40014' => '\\ccxt\\PermissionDenied', // Invalid permissions
                    '40015' => '\\ccxt\\ExchangeError', // System error
                    '40017' => '\\ccxt\\BadRequest', // Parameter validation failed
                    '40018' => '\\ccxt\\PermissionDenied', // Invalid IP request
                    '40102' => '\\ccxt\\BadSymbol', // Trading pair configuration does not exist
                    '40200' => '\\ccxt\\OnMaintenance', // The server is being upgraded. Please try again later.
                    '40305' => '\\ccxt\\InvalidOrder', // client_oid exceeds 40 characters or is in an invalid format
                    '40409' => '\\ccxt\\BadRequest', // Incorrect format
                    '40704' => '\\ccxt\\BadRequest', // Only the last three months of historical data are accessible
                    '40707' => '\\ccxt\\BadRequest', // Start time has a greater value than the end time
                    '40724' => '\\ccxt\\BadRequest', // Empty parameter
                    '40725' => '\\ccxt\\BadRequest', // Server returns an error response
                    '40912' => '\\ccxt\\BadRequest', // Batch cancel limit exceeded (max 50 orders)
                    '40913' => '\\ccxt\\ArgumentsRequired', // Either orderId or clientId is required
                    '43001' => '\\ccxt\\OrderNotFound', // Order does not exist
                    '43002' => '\\ccxt\\InvalidOrder', // Failed to place order
                    '43004' => '\\ccxt\\OrderNotFound', // There are no orders that can be canceled.
                    '43005' => '\\ccxt\\InvalidOrder', // Order quantity exceeds maximum order limit
                    '43006' => '\\ccxt\\InvalidOrder', // Amount is less than the minimum order amount
                    '43007' => '\\ccxt\\InvalidOrder', // Amount exceeds maximum order amount
                    '43009' => '\\ccxt\\InvalidOrder', // The current order price exceeds the limit of 0
                    '43010' => '\\ccxt\\InvalidOrder', // Trading volume cannot be less than 0
                    '43011' => '\\ccxt\\InvalidOrder', // The current order price cannot be lower than 0
                    '429' => '\\ccxt\\RateLimitExceeded', // Too Many Requests
                ),
                'broad' => array(),
            ),
            'commonCurrencies' => array(
                // Add any currency mappings if needed
            ),
        ));
    }

    public function fetch_time($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * fetches the current integer timestamp in milliseconds from the exchange server
             * @see https://doc-en.weex.com/#get-server-time
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {int} the current integer timestamp in milliseconds from the exchange server
             */
            $response = Async\await($this->publicGetPublicTime ($params));
            //
            //     {
            //         "code" => "00000",
            //         "msg" => "success",
            //         "requestTime" => 1622097118135,
            //         "data" => 1622097118134
            //     }
            //
            return $this->safe_integer($response, 'data');
        }) ();
    }

    public function fetch_currencies($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * fetches all available currencies on an exchange
             * @see https://doc-en.weex.com/#basic-crypto-information
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an associative dictionary of currencies
             */
            $response = Async\await($this->publicGetPublicCurrencies ($params));
            //
            //     {
            //         "code":"00000",
            //         "msg":"success",
            //         "requestTime":1622097139437,
            //         "data":array(
            //             {
            //                 "coinId":"1",
            //                 "coinName":"BTC",
            //                 "transfer":"true",
            //                 "chains":array(
            //                     {
            //                         "chain":null,
            //                         "needTag":"false",
            //                         "withdrawAble":"true",
            //                         "rechargeAble":"true",
            //                         "withdrawFee":"0.005",
            //                         "depositConfirm":"1",
            //                         "withdrawConfirm":"1",
            //                         "minDepositAmount":"0.001",
            //                         "minWithdrawAmount":"0.001",
            //                         "browserUrl":"https://blockchair.com/bitcoin/testnet/transaction/"
            //                     }
            //                 )
            //             }
            //         )
            //     }
            //
            $data = $this->safe_list($response, 'data', array());
            $result = array();
            for ($i = 0; $i < count($data); $i++) {
                $currency = $data[$i];
                $id = $this->safe_string($currency, 'coinName');
                $code = $this->safe_currency_code($id);
                $chains = $this->safe_list($currency, 'chains', array());
                $networks = array();
                $fee = null;
                for ($j = 0; $j < count($chains); $j++) {
                    $chain = $chains[$j];
                    $networkId = $this->safe_string($chain, 'chain');
                    $networkCode = $networkId ? $networkId : $id;
                    $withdrawEnabled = $this->safe_bool($chain, 'withdrawAble');
                    $depositEnabled = $this->safe_bool($chain, 'rechargeAble');
                    $withdrawFee = $this->safe_number($chain, 'withdrawFee');
                    if ($fee === null) {
                        $fee = $withdrawFee;
                    }
                    $networks[$networkCode] = array(
                        'info' => $chain,
                        'id' => $networkId,
                        'network' => $networkCode,
                        'active' => $withdrawEnabled && $depositEnabled,
                        'deposit' => $depositEnabled,
                        'withdraw' => $withdrawEnabled,
                        'fee' => $withdrawFee,
                        'precision' => null,
                        'limits' => array(
                            'withdraw' => array(
                                'min' => $this->safe_number($chain, 'minWithdrawAmount'),
                                'max' => null,
                            ),
                            'deposit' => array(
                                'min' => $this->safe_number($chain, 'minDepositAmount'),
                                'max' => null,
                            ),
                        ),
                    );
                }
                $result[$code] = array(
                    'info' => $currency,
                    'id' => $id,
                    'numericId' => $this->safe_string($currency, 'coinId'),
                    'code' => $code,
                    'precision' => null,
                    'type' => null,
                    'name' => null,
                    'active' => null,
                    'deposit' => null,
                    'withdraw' => null,
                    'networks' => $networks,
                    'fee' => $fee,
                    'limits' => array(
                        'amount' => array(
                            'min' => null,
                            'max' => null,
                        ),
                    ),
                );
            }
            return $result;
        }) ();
    }

    public function fetch_markets($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * retrieves $data on all markets for weex
             * @see https://doc-en.weex.com/#get-$symbol-info
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} an array of objects representing $market $data
             */
            $response = Async\await($this->publicGetPublicExchangeInfo ($params));
            //
            //     {
            //       "code" => "00000",
            //       "msg" => "success",
            //       "requestTime" => 1743661516052,
            //       "data" => array(
            //         {
            //           "symbol" => "BTCUSDT_SPBL",
            //           "baseCoin" => "BTC",
            //           "quoteCoin" => "USDT",
            //           "tickSize" => "0.1",
            //           "stepSize" => "0.00000001",
            //           "minTradeAmount" => "0.00001",
            //           "maxTradeAmount" => "99999",
            //           "takerFeeRate" => "0.001",
            //           "makerFeeRate" => "0",
            //           "enableTrade" => true,
            //           "enableDisplay" => true
            //         }
            //       )
            //     }
            //
            $data = $this->safe_list($response, 'data', array());
            $result => Marketarray() = array();
            for ($i = 0; $i < count($data); $i++) {
                $market = $data[$i];
                $marketId = $this->safe_string($market, 'symbol');
                $baseId = $this->safe_string($market, 'baseCoin');
                $quoteId = $this->safe_string($market, 'quoteCoin');
                $base = $this->safe_currency_code($baseId);
                $quote = $this->safe_currency_code($quoteId);
                $symbol = $base . '/' . $quote;
                $active = $this->safe_bool($market, 'enableTrade');
                $tickSize = $this->safe_string($market, 'tickSize');
                $stepSize = $this->safe_string($market, 'stepSize');
                $result[] = array(
                    'info' => $market,
                    'id' => $marketId,
                    'symbol' => $symbol,
                    'base' => $base,
                    'quote' => $quote,
                    'settle' => null,
                    'baseId' => $baseId,
                    'quoteId' => $quoteId,
                    'settleId' => null,
                    'type' => 'spot',
                    'spot' => true,
                    'margin' => false,
                    'swap' => false,
                    'future' => false,
                    'option' => false,
                    'active' => $active,
                    'contract' => false,
                    'linear' => null,
                    'inverse' => null,
                    'contractSize' => null,
                    'expiry' => null,
                    'expiryDatetime' => null,
                    'strike' => null,
                    'optionType' => null,
                    'precision' => array(
                        'amount' => $this->parse_number($stepSize),
                        'price' => $this->parse_number($tickSize),
                    ),
                    'limits' => array(
                        'leverage' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'amount' => array(
                            'min' => $this->safe_number($market, 'minTradeAmount'),
                            'max' => $this->safe_number($market, 'maxTradeAmount'),
                        ),
                        'price' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'cost' => array(
                            'min' => null,
                            'max' => null,
                        ),
                    ),
                    'created' => null,
                );
            }
            return $result;
        }) ();
    }

    public function fetch_ticker(?string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
             * @see https://doc-en.weex.com/#get-single-ticker
             * @param {string} $symbol unified $symbol of the $market to fetch the ticker for
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $response = Async\await($this->publicGetMarketTicker ($this->extend($request, $params)));
            //
            //     {
            //       "code" => "00000",
            //       "msg" => "success",
            //       "requestTime" => 1743665793483,
            //       "data" => {
            //         "symbol" => "BTCUSDT_SPBL",
            //         "priceChange" => "-965.6",
            //         "priceChangePercent" => "-0.011451",
            //         "trades" => 105901,
            //         "size" => "78570.57284800",
            //         "value" => "6731333236.9492884000",
            //         "high" => "88495.5",
            //         "low" => "82175.9",
            //         "open" => "84319.6",
            //         "close" => "83354.0",
            //         "lastPrice" => "83354.0",
            //         "ts" => 1750060557824
            //       }
            //     }
            //
            $data = $this->safe_dict($response, 'data', array());
            return $this->parse_ticker($data, $market);
        }) ();
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
             * @see https://doc-en.weex.com/#get-all-$ticker
             * @param {string[]|null} $symbols unified $symbols of the markets to fetch the $ticker for, all market tickers are returned if not assigned
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structures~
             */
            Async\await($this->load_markets());
            $response = Async\await($this->publicGetMarketTickers ($params));
            //
            //     {
            //       "code" => "00000",
            //       "msg" => "success",
            //       "data" => array(
            //         {
            //           "symbol" => "BTCUSDT_SPBL",
            //           "priceChange" => "-965.6",
            //           "priceChangePercent" => "-0.011451",
            //           // ... more $ticker $data
            //         }
            //       )
            //     }
            //
            $data = $this->safe_list($response, 'data', array());
            $result = array();
            for ($i = 0; $i < count($data); $i++) {
                $ticker = $this->parse_ticker($data[$i]);
                $symbol = $ticker['symbol'];
                $result[$symbol] = $ticker;
            }
            return $this->filter_by_array_tickers($result, 'symbol', $symbols);
        }) ();
    }

    public function parse_ticker(array $ticker, ?array $market = null): array {
        //
        //     {
        //       "symbol" => "BTCUSDT_SPBL",
        //       "priceChange" => "-965.6",
        //       "priceChangePercent" => "-0.011451",
        //       "trades" => 105901,
        //       "size" => "78570.57284800",
        //       "value" => "6731333236.9492884000",
        //       "high" => "88495.5",
        //       "low" => "82175.9",
        //       "open" => "84319.6",
        //       "close" => "83354.0",
        //       "lastPrice" => "83354.0",
        //       "ts" => 1750060557824
        //     }
        //
        $marketId = $this->safe_string($ticker, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market);
        $timestamp = $this->safe_integer($ticker, 'ts');
        $last = $this->safe_string($ticker, 'lastPrice');
        $open = $this->safe_string($ticker, 'open');
        $high = $this->safe_string($ticker, 'high');
        $low = $this->safe_string($ticker, 'low');
        $change = $this->safe_string($ticker, 'priceChange');
        $percentage = $this->safe_string($ticker, 'priceChangePercent');
        $baseVolume = $this->safe_string($ticker, 'size');
        $quoteVolume = $this->safe_string($ticker, 'value');
        $count = $this->safe_integer($ticker, 'trades');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $high,
            'low' => $low,
            'bid' => null,
            'bidVolume' => null,
            'ask' => null,
            'askVolume' => null,
            'vwap' => null,
            'open' => $open,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => $change,
            'percentage' => $percentage,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'count' => $count,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_order_book(?string $symbol, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $limit, $params) {
            /**
             * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other $data
             * @see https://doc-en.weex.com/#get-orderbook-depth
             * @param {string} $symbol unified $symbol of the $market to fetch the order book for
             * @param {int} [$limit] the maximum amount of order book entries to return (15 or 200)
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} A dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market symbols
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            if ($limit !== null) {
                $request['limit'] = $limit; // 15 or 200
            }
            $response = Async\await($this->publicGetMarketDepth ($this->extend($request, $params)));
            //
            //     {
            //         "code":"00000",
            //         "msg":"success",
            //         "requestTime":1622102974025,
            //         "data":{
            //             "asks":[
            //                 ["38084.5","0.0039"],
            //                 ["38085.7","0.0018"]
            //             ],
            //             "bids":[
            //                 ["38073.7","0.4993000000000000"],
            //                 ["38073.4","0.4500"]
            //             ],
            //             "timestamp":"1622102974025"
            //         }
            //     }
            //
            $data = $this->safe_dict($response, 'data', array());
            $timestamp = $this->safe_integer($data, 'timestamp');
            return $this->parse_order_book($data, $symbol, $timestamp);
        }) ();
    }

    public function fetch_trades(?string $symbol, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * get the list of most recent trades for a particular $symbol
             * @see https://doc-en.weex.com/#get-trades
             * @param {string} $symbol unified $symbol of the $market to fetch trades for
             * @param {int} [$since] timestamp in ms of the earliest trade to fetch
             * @param {int} [$limit] the maximum amount of trades to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=public-trades trade structures~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = Async\await($this->publicGetMarketFills ($this->extend($request, $params)));
            //
            //     {
            //         "code" => "00000",
            //         "msg" => "success",
            //         "requestTime" => 1743668717640,
            //         "data" => array(
            //             {
            //                 "symbol" => "BTCUSDT_SPBL",
            //                 "tradeId" => "778a5376-a0b6-4c8f-ab64-dd6ea40f896e",
            //                 "fillTime" => 1743668713364,
            //                 "fillPrice" => "83609.7",
            //                 "fillQuantity" => "0.00011400",
            //                 "tradeValue" => "9.531505800",
            //                 "bestMatch" => true,
            //                 "buyerMaker" => true
            //             }
            //         )
            //     }
            //
            $data = $this->safe_list($response, 'data', array());
            return $this->parse_trades($data, $market, $since, $limit);
        }) ();
    }

    public function parse_trade(array $trade, ?array $market = null): array {
        //
        // fetchTrades (public)
        //
        //     {
        //         "symbol" => "BTCUSDT_SPBL",
        //         "tradeId" => "778a5376-a0b6-4c8f-ab64-dd6ea40f896e",
        //         "fillTime" => 1743668713364,
        //         "fillPrice" => "83609.7",
        //         "fillQuantity" => "0.00011400",
        //         "tradeValue" => "9.531505800",
        //         "bestMatch" => true,
        //         "buyerMaker" => true
        //     }
        //
        // fetchMyTrades (private)
        //
        //     {
        //         "accountId" => "590105411156181178",
        //         "symbol" => "WXTUSDT_SPBL",
        //         "baseCoin" => "WXT",
        //         "quoteCoin" => "USDT",
        //         "orderId" => "602929507946463674",
        //         "fillId" => "602929507971629498",
        //         "orderType" => "",
        //         "side" => "buy",
        //         "fillPrice" => "",
        //         "fillQuantity" => "10",
        //         "fillTotalAmount" => "0.10476",
        //         "fees" => "0.01",
        //         "cTime" => "1743749596589"
        //     }
        //
        $marketId = $this->safe_string($trade, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market);
        $id = $this->safe_string_2($trade, 'tradeId', 'fillId');
        $orderId = $this->safe_string($trade, 'orderId');
        $timestamp = $this->safe_integer_2($trade, 'fillTime', 'cTime');
        $priceString = $this->safe_string_2($trade, 'fillPrice', 'fillPrice');
        $amountString = $this->safe_string($trade, 'fillQuantity');
        $costString = $this->safe_string_2($trade, 'tradeValue', 'fillTotalAmount');
        $side = $this->safe_string($trade, 'side');
        $takerOrMaker = null;
        $buyerMaker = $this->safe_bool($trade, 'buyerMaker');
        if ($buyerMaker !== null) {
            $takerOrMaker = $buyerMaker ? 'maker' : 'taker';
        }
        $feeString = $this->safe_string($trade, 'fees');
        $fee = null;
        if ($feeString !== null) {
            $fee = array(
                'cost' => $feeString,
                'currency' => null,
            );
        }
        return $this->safe_trade(array(
            'info' => $trade,
            'id' => $id,
            'order' => $orderId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'type' => null,
            'side' => $side,
            'amount' => $amountString,
            'price' => $priceString,
            'cost' => $costString,
            'takerOrMaker' => $takerOrMaker,
            'fee' => $fee,
        ), $market);
    }

    public function fetch_ohlcv(?string $symbol, $timeframe = '1m', ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $timeframe, $since, $limit, $params) {
            /**
             * fetches historical candlestick $data containing the open, high, low, and close price, and the volume of a $market
             * @see https://doc-en.weex.com/#get-candlestick-$data
             * @param {string} $symbol unified $symbol of the $market to fetch OHLCV $data for
             * @param {string} $timeframe the length of time each candle represents
             * @param {int} [$since] timestamp in ms of the earliest candle to fetch
             * @param {int} [$limit] the maximum amount of candles to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {int[][]} A list of candles ordered, open, high, low, close, volume
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
                'period' => $this->safe_string($this->timeframes, $timeframe, $timeframe),
            );
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = Async\await($this->publicGetMarketCandles ($this->extend($request, $params)));
            //
            //     {
            //       "code" => "00000",
            //       "msg" => "success",
            //       "requestTime" => 1743669821003,
            //       "data" => array(
            //         array(
            //           1743669000000,
            //           "83654.0",
            //           "83778.0",
            //           "83531.5",
            //           "83688.7",
            //           "248.17024800",
            //           "20755885.859164900"
            //         )
            //       )
            //     }
            //
            $data = $this->safe_list($response, 'data', array());
            return $this->parse_ohlcvs($data, $market, $timeframe, $since, $limit);
        }) ();
    }

    public function parse_ohlcv($ohlcv, ?array $market = null): array {
        //
        //     array(
        //       1743669000000,
        //       "83654.0",
        //       "83778.0",
        //       "83531.5",
        //       "83688.7",
        //       "248.17024800",
        //       "20755885.859164900"
        //     )
        //
        return array(
            $this->safe_integer($ohlcv, 0),
            $this->safe_number($ohlcv, 1),
            $this->safe_number($ohlcv, 2),
            $this->safe_number($ohlcv, 3),
            $this->safe_number($ohlcv, 4),
            $this->safe_number($ohlcv, 5),
        );
    }

    public function fetch_balance($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * query for balance and get the amount of funds available for trading or funds locked in orders
             * @see https://doc-en.weex.com/#get-account-assets
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=balance-structure balance structure~
             */
            Async\await($this->load_markets());
            $response = Async\await($this->privateGetAccountAssets ($params));
            //
            //     {
            //       "code" => "00000",
            //       "msg" => "success",
            //       "requestTime" => 1743729400189,
            //       "data" => [array(
            //         "coinId" => 1,
            //         "coinName" => "BTC",
            //         "available" => "0.0040000000000000",
            //         "frozen" => "0",
            //         "equity" => "0.0040000000000000"
            //       ), array(
            //         "coinId" => 2,
            //         "coinName" => "USDT",
            //         "available" => "10000999657.8927028500000000",
            //         "frozen" => "0",
            //         "equity" => "10000999657.8927028500000000"
            //       )]
            //     }
            //
            $data = $this->safe_list($response, 'data', array());
            return $this->parse_balance($data);
        }) ();
    }

    public function parse_balance(array $response): array {
        $result = array(
            'info' => $response,
            'timestamp' => null,
            'datetime' => null,
        );
        for ($i = 0; $i < count($response); $i++) {
            $balance = $response[$i];
            $currencyId = $this->safe_string($balance, 'coinName');
            $code = $this->safe_currency_code($currencyId);
            $account = $this->account();
            $account['free'] = $this->safe_string($balance, 'available');
            $account['used'] = $this->safe_string($balance, 'frozen');
            $account['total'] = $this->safe_string($balance, 'equity');
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function create_order(?string $symbol, string $type, string $side, ?float $amount, ?float $price = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $type, $side, $amount, $price, $params) {
            /**
             * create a trade order
             * @see https://doc-en.weex.com/#place-order
             * @param {string} $symbol unified $symbol of the $market to create an order in
             * @param {string} $type 'market' or 'limit'
             * @param {string} $side 'buy' or 'sell'
             * @param {float} $amount how much of currency you want to trade in units of base currency
             * @param {float} [$price] the $price at which the order is to be fulfilled, in units of the quote currency, ignored in $market orders
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string} [$params->clientOrderId] client order id, defaults to uuid if not passed
             * @param {string} [$params->force] order execution $type => 'normal', 'postOnly', 'fok', 'ioc'
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
                'side' => $side,
                'orderType' => $type,
                'quantity' => $this->amount_to_precision($symbol, $amount),
            );
            $clientOrderId = $this->safe_string($params, 'clientOrderId', $this->uuid());
            $request['clientOrderId'] = $clientOrderId;
            if ($type === 'limit') {
                if ($price === null) {
                    throw new ArgumentsRequired($this->id . ' createOrder() requires a $price argument for limit orders');
                }
                $request['price'] = $this->price_to_precision($symbol, $price);
            }
            $force = $this->safe_string($params, 'force', 'normal');
            $request['force'] = $force;
            $params = $this->omit($params, array( 'clientOrderId', 'force' ));
            $response = Async\await($this->privatePostTradeOrders ($this->extend($request, $params)));
            //
            //     {
            //       "code" => "00000",
            //       "msg" => "success",
            //       "requestTime" => 1743736915184,
            //       "data" => {
            //         "orderId" => 602876318261969338,
            //         "clientOrderId" => "202504041121509751743736910566"
            //       }
            //     }
            //
            $data = $this->safe_dict($response, 'data', array());
            return $this->parse_order($data, $market);
        }) ();
    }

    public function cancel_order(?string $id, ?string $symbol = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * cancels an open order
             * @see https://doc-en.weex.com/#cancel-order
             * @param {string} $id order $id
             * @param {string} $symbol unified $symbol of the $market the order was made in
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string} [$params->clientOrderId] client order $id
             * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' cancelOrder() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $clientOrderId = $this->safe_string($params, 'clientOrderId');
            if ($clientOrderId !== null) {
                $request['clientOid'] = $clientOrderId;
            } else {
                $request['orderId'] = $id;
            }
            $params = $this->omit($params, array( 'clientOrderId' ));
            $response = Async\await($this->privatePostTradeCancelOrder ($this->extend($request, $params)));
            //
            //     {
            //       "code" => "00000",
            //       "msg" => "success",
            //       "requestTime" => 1743740792018,
            //       "data" => {
            //         "order_id" => "602882076026339770",
            //         "client_oid" => null,
            //         "symbol" => "WXTUSDT_SPBL",
            //         "result" => true,
            //         "err_code" => null,
            //         "err_msg" => null
            //       }
            //     }
            //
            $data = $this->safe_dict($response, 'data', array());
            return $this->parse_order($data, $market);
        }) ();
    }

    public function fetch_order(?string $id, ?string $symbol = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * fetches information on an order made by the user
             * @see https://doc-en.weex.com/#get-order-info
             * @param {string} $id the order $id
             * @param {string} $symbol unified $symbol of the $market the order was made in
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string} [$params->clientOrderId] client order $id
             * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array();
            $clientOrderId = $this->safe_string($params, 'clientOrderId');
            if ($clientOrderId !== null) {
                $request['clientOrderId'] = $clientOrderId;
            } else {
                $request['orderId'] = $id;
            }
            $params = $this->omit($params, array( 'clientOrderId' ));
            $response = Async\await($this->privatePostTradeOrderInfo ($this->extend($request, $params)));
            //
            //     {
            //       "code" => "00000",
            //       "msg" => "success",
            //       "requestTime" => 1743754256238,
            //       "data" => [array(
            //         "accountId" => "590105411156181178",
            //         "symbol" => "WXTUSDT_SPBL",
            //         "orderId" => "602928955330134458",
            //         "clientOrderId" => "202504041451014391743749461316",
            //         "price" => "100.000000",
            //         "quantity" => "10",
            //         "orderType" => "limit",
            //         "side" => "sell",
            //         "status" => "open",
            //         "latestFillPrice" => "0",
            //         "maxFillPrice" => "0",
            //         "minFillPrice" => "0",
            //         "fillQuantity" => "0",
            //         "fillTotalAmount" => "0",
            //         "cTime" => "1743749464829",
            //         "uTime" => "1743749464834"
            //       )]
            //     }
            //
            $data = $this->safe_list($response, 'data', array());
            $first = $this->safe_dict($data, 0, array());
            return $this->parse_order($first, $market);
        }) ();
    }

    public function parse_order(array $order, ?array $market = null): array {
        //
        // createOrder
        //
        //     {
        //       "orderId" => 602876318261969338,
        //       "clientOrderId" => "202504041121509751743736910566"
        //     }
        //
        // cancelOrder
        //
        //     {
        //       "order_id" => "602882076026339770",
        //       "client_oid" => null,
        //       "symbol" => "WXTUSDT_SPBL",
        //       "result" => true,
        //       "err_code" => null,
        //       "err_msg" => null
        //     }
        //
        // fetchOrder, fetchOrders, fetchOpenOrders
        //
        //     {
        //       "accountId" => "590105411156181178",
        //       "symbol" => "WXTUSDT_SPBL",
        //       "orderId" => "602928955330134458",
        //       "clientOrderId" => "202504041451014391743749461316",
        //       "price" => "100.000000",
        //       "quantity" => "10",
        //       "orderType" => "limit",
        //       "side" => "sell",
        //       "status" => "open",
        //       "latestFillPrice" => "0",
        //       "maxFillPrice" => "0",
        //       "minFillPrice" => "0",
        //       "fillQuantity" => "0",
        //       "fillTotalAmount" => "0",
        //       "cTime" => "1743749464829",
        //       "uTime" => "1743749464834"
        //     }
        //
        $marketId = $this->safe_string($order, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market);
        $id = $this->safe_string_2($order, 'orderId', 'order_id');
        $clientOrderId = $this->safe_string_2($order, 'clientOrderId', 'client_oid');
        $timestamp = $this->safe_integer($order, 'cTime');
        $lastUpdateTimestamp = $this->safe_integer($order, 'uTime');
        $type = $this->safe_string($order, 'orderType');
        $side = $this->safe_string($order, 'side');
        $amount = $this->safe_string($order, 'quantity');
        $price = $this->safe_string($order, 'price');
        $filled = $this->safe_string($order, 'fillQuantity');
        $cost = $this->safe_string($order, 'fillTotalAmount');
        $average = $this->safe_string($order, 'latestFillPrice');
        $status = $this->safe_string($order, 'status');
        if ($status === 'new') {
            $status = 'open';
        } elseif ($status === 'partial_fill') {
            $status = 'open';
        } elseif ($status === 'full_fill') {
            $status = 'closed';
        } elseif ($status === 'cancelled') {
            $status = 'canceled';
        }
        return $this->safe_order(array(
            'info' => $order,
            'id' => $id,
            'clientOrderId' => $clientOrderId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => $lastUpdateTimestamp,
            'lastUpdateTimestamp' => $lastUpdateTimestamp,
            'symbol' => $symbol,
            'type' => $type,
            'timeInForce' => null,
            'postOnly' => null,
            'side' => $side,
            'amount' => $amount,
            'price' => $price,
            'stopPrice' => null,
            'triggerPrice' => null,
            'cost' => $cost,
            'average' => $average,
            'filled' => $filled,
            'remaining' => null,
            'status' => $status,
            'fee' => null,
            'trades' => null,
        ), $market);
    }

    public function fetch_open_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch all unfilled currently open $orders
             * @see https://doc-en.weex.com/#get-current-$orders
             * @param {string} $symbol unified $market $symbol
             * @param {int} [$since] the earliest time in ms to fetch open $orders for
             * @param {int} [$limit] the maximum number of  open $orders structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {int} [$params->pageNo] page number (starting from 0, default 0)
             * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchOpenOrders() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $pageNo = $this->safe_integer($params, 'pageNo');
            if ($pageNo !== null) {
                $request['pageNo'] = $pageNo;
            }
            $params = $this->omit($params, array( 'pageNo' ));
            $response = Async\await($this->privatePostTradeOpenOrders ($this->extend($request, $params)));
            //
            //     {
            //       "code" => "00000",
            //       "msg" => "success",
            //       "requestTime" => 1743753174247,
            //       "data" => {
            //         "orderInfoResultList" => [array(
            //           "accountId" => "590105411156181178",
            //           "symbol" => "WXTUSDT_SPBL",
            //           "orderId" => "602941812964852154",
            //           "clientOrderId" => "202504040742105191743752530280",
            //           // ... more order $data
            //         )],
            //         "nextPage" => null,
            //         "totals" => null
            //       }
            //     }
            //
            $data = $this->safe_dict($response, 'data', array());
            $orders = $this->safe_list($data, 'orderInfoResultList', array());
            return $this->parse_orders($orders, $market, $since, $limit);
        }) ();
    }

    public function fetch_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetches information on multiple $orders made by the user
             * @see https://doc-en.weex.com/#get-history-$orders
             * @param {string} $symbol unified $market $symbol of the $market $orders were made in
             * @param {int} [$since] the earliest time in ms to fetch $orders for
             * @param {int} [$limit] the maximum number of order structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {int} [$params->after] start timestamp (in milliseconds)
             * @param {int} [$params->before] end timestamp (in milliseconds)
             * @param {int} [$params->pageIndex] page number, starting from 0 (Default => 0)
             * @param {int} [$params->pageSize] page size, must be greater than 0 and less than or equal to 100 (Default => 10)
             * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchOrders() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            if ($since !== null) {
                $request['after'] = $since;
            }
            if ($limit !== null) {
                $request['pageSize'] = $limit;
            }
            $response = Async\await($this->privatePostTradeHistory ($this->extend($request, $params)));
            //
            //     {
            //       "code" => "00000",
            //       "msg" => "success",
            //       "requestTime" => 1743755234949,
            //       "data" => {
            //         "orderInfoResultList" => [array(
            //           "accountId" => "590105411156181178",
            //           "symbol" => "WXTUSDT_SPBL",
            //           "orderId" => "602941812964852154",
            //           // ... more order $data
            //         )],
            //         "nextPage" => true,
            //         "totals" => 0
            //       }
            //     }
            //
            $data = $this->safe_dict($response, 'data', array());
            $orders = $this->safe_list($data, 'orderInfoResultList', array());
            return $this->parse_orders($orders, $market, $since, $limit);
        }) ();
    }

    public function fetch_my_trades(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch all $trades made by the user
             * @see https://doc-en.weex.com/#get-fills
             * @param {string} $symbol unified $market $symbol
             * @param {int} [$since] the earliest time in ms to fetch $trades for
             * @param {int} [$limit] the maximum number of $trades structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string} [$params->orderId] order id
             * @param {int} [$params->after] start timestamp (in milliseconds)
             * @param {int} [$params->before] end timestamp (in milliseconds)
             * @param {int} [$params->pageIndex] page number, starting from 0 (Default => 0)
             * @param {int} [$params->pageSize] page size, must be greater than 0 and less than or equal to 100 (Default => 10)
             * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=trade-structure trade structures~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchMyTrades() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            if ($since !== null) {
                $request['after'] = $since;
            }
            if ($limit !== null) {
                $request['pageSize'] = $limit;
            }
            $response = Async\await($this->privatePostTradeFills ($this->extend($request, $params)));
            //
            //     {
            //       "code" => "00000",
            //       "msg" => "success",
            //       "requestTime" => 1743750228305,
            //       "data" => {
            //         "fillsOrderResultList" => [array(
            //           "accountId" => "590105411156181178",
            //           "symbol" => "WXTUSDT_SPBL",
            //           "baseCoin" => "WXT",
            //           "quoteCoin" => "USDT",
            //           "orderId" => "602929507946463674",
            //           "fillId" => "602929507971629498",
            //           "orderType" => "",
            //           "side" => "buy",
            //           "fillPrice" => "",
            //           "fillQuantity" => "10",
            //           "fillTotalAmount" => "0.10476",
            //           "fees" => "0.01",
            //           "cTime" => "1743749596589"
            //         )],
            //         "nextPage" => false,
            //         "totals" => 0
            //       }
            //     }
            //
            $data = $this->safe_dict($response, 'data', array());
            $trades = $this->safe_list($data, 'fillsOrderResultList', array());
            return $this->parse_trades($trades, $market, $since, $limit);
        }) ();
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null): array {
        $url = $this->urls['api'][$api] . '/' . $path;
        if ($api === 'public') {
            if ($params) {
                $url .= '?' . $this->urlencode($params);
            }
        } elseif ($api === 'private') {
            $this->check_required_credentials();
            $timestamp = (string) $this->milliseconds();
            $queryString = '';
            if ($method === 'GET') {
                if ($params) {
                    $queryString = '?' . $this->urlencode($params);
                    $url .= $queryString;
                }
            } else {
                if ($params) {
                    $body = $this->json($params);
                }
            }
            $auth = $timestamp . strtoupper($method) . '/' . $path;
            $message = $queryString ? $auth . $queryString . ($body || '') : $auth . ($body || '');
            $signature = $this->hmac($this->encode($message), $this->encode($this->secret), 'sha256', 'base64');
            $headers = array(
                'ACCESS-KEY' => $this->apiKey,
                'ACCESS-SIGN' => $signature,
                'ACCESS-TIMESTAMP' => $timestamp,
                'ACCESS-PASSPHRASE' => $this->password,
                'Content-Type' => 'application/json',
                'locale' => 'en-US',
            );
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors(int $httpCode, ?string $reason, ?string $url, ?string $method, array $headers, ?string $body, array $response, array $requestHeaders, ?string $requestBody) {
        if ($response === null) {
            return; // fallback to default error handler
        }
        //
        //     {
        //         "code" => "40001",
        //         "msg" => "Header \"ACCESS_KEY\" is required",
        //         "requestTime" => 1622097118135
        //     }
        //
        $code = $this->safe_string($response, 'code');
        $message = $this->safe_string($response, 'msg');
        if ($code !== null && $code !== '00000') {
            $feedback = $this->id . ' ' . $body;
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $code, $feedback);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $feedback);
            throw new ExchangeError($feedback); // unknown $message
        }
    }
}
