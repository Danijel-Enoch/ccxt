# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.base.exchange import Exchange
from ccxt.abstract.weex import ImplicitAPI
import hashlib
from ccxt.base.types import Any, Balances, Currencies, Int, Market, Num, Order, OrderBook, OrderSide, OrderType, Str, Strings, Ticker, Tickers, Trade
from typing import List
from ccxt.base.errors import ExchangeError
from ccxt.base.errors import AuthenticationError
from ccxt.base.errors import PermissionDenied
from ccxt.base.errors import AccountSuspended
from ccxt.base.errors import ArgumentsRequired
from ccxt.base.errors import BadRequest
from ccxt.base.errors import BadSymbol
from ccxt.base.errors import InvalidOrder
from ccxt.base.errors import OrderNotFound
from ccxt.base.errors import RateLimitExceeded
from ccxt.base.errors import OnMaintenance
from ccxt.base.errors import InvalidNonce
from ccxt.base.decimal_to_precision import TICK_SIZE


class weex(Exchange, ImplicitAPI):

    def describe(self) -> Any:
        return self.deep_extend(super(weex, self).describe(), {
            'id': 'weex',
            'name': 'WEEX',
            'countries': ['SC'],  # Seychelles
            'rateLimit': 100,
            'version': 'v2',
            'certified': False,
            'pro': False,
            'has': {
                'CORS': None,
                'spot': True,
                'margin': False,
                'swap': False,
                'future': False,
                'option': False,
                'addMargin': False,
                'borrowCrossMargin': False,
                'borrowIsolatedMargin': False,
                'cancelAllOrders': True,
                'cancelOrder': True,
                'cancelOrders': True,
                'closeAllPositions': False,
                'closePosition': False,
                'createDepositAddress': False,
                'createLimitBuyOrder': True,
                'createLimitSellOrder': True,
                'createMarketBuyOrder': True,
                'createMarketOrderWithCost': True,
                'createMarketSellOrder': True,
                'createOrder': True,
                'createOrders': True,
                'createOrderWithTakeProfitAndStopLoss': False,
                'createPostOnlyOrder': True,
                'createReduceOnlyOrder': False,
                'createStopLimitOrder': False,
                'createStopLossOrder': False,
                'createStopMarketOrder': False,
                'createStopOrder': False,
                'createTakeProfitOrder': False,
                'createTrailingPercentOrder': False,
                'createTriggerOrder': False,
                'editOrder': False,
                'fetchBalance': True,
                'fetchBidsAsks': False,
                'fetchBorrowInterest': False,
                'fetchBorrowRateHistories': False,
                'fetchBorrowRateHistory': False,
                'fetchClosedOrders': False,
                'fetchCurrencies': True,
                'fetchDepositAddress': False,
                'fetchDepositAddresses': False,
                'fetchDeposits': False,
                'fetchFundingHistory': False,
                'fetchFundingRate': False,
                'fetchFundingRateHistory': False,
                'fetchFundingRates': False,
                'fetchIndexOHLCV': False,
                'fetchL2OrderBook': False,
                'fetchLastPrices': False,
                'fetchLedger': True,
                'fetchMarkets': True,
                'fetchMyTrades': True,
                'fetchOHLCV': True,
                'fetchOpenInterest': False,
                'fetchOpenInterestHistory': False,
                'fetchOpenOrders': True,
                'fetchOrder': True,
                'fetchOrderBook': True,
                'fetchOrders': True,
                'fetchOrderTrades': False,
                'fetchPosition': False,
                'fetchPositions': False,
                'fetchPositionsRisk': False,
                'fetchPremiumIndexOHLCV': False,
                'fetchStatus': True,
                'fetchTicker': True,
                'fetchTickers': True,
                'fetchTime': True,
                'fetchTrades': True,
                'fetchTradingFee': False,
                'fetchTradingFees': False,
                'fetchTransfers': True,
                'fetchWithdrawals': False,
                'reduceMargin': False,
                'setLeverage': False,
                'setMarginMode': False,
                'setPositionMode': False,
                'transfer': False,
                'withdraw': False,
            },
            'timeframes': {
                '1m': '1m',
                '5m': '5m',
                '15m': '15m',
                '30m': '30m',
                '1h': '1h',
                '2h': '2h',
                '4h': '4h',
                '6h': '6h',
                '8h': '8h',
                '12h': '12h',
                '1d': '1day',
                '1w': '1week',
                '1M': '1M',
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/85734211-85755480-b705-11ea-8b35-0b7f1db33a2f.jpg',
                'api': {
                    'public': 'https://api-spot.weex.com/api/v2',
                    'private': 'https://api-spot.weex.com/api/v2',
                },
                'www': 'https://www.weex.com',
                'doc': [
                    'https://doc-en.weex.com',
                    'https://github.com/weex-exchange',
                ],
                'fees': 'https://www.weex.com/fees',
                'referral': None,
            },
            'api': {
                'public': {
                    'get': {
                        'public/time': 1,
                        'public/currencies': 1,
                        'public/products': 1,
                        'public/exchangeInfo': 1,
                        'market/ticker': 1,
                        'market/tickers': 1,
                        'market/fills': 1,
                        'market/candles': 1,
                        'market/depth': 1,
                    },
                },
                'private': {
                    'get': {
                        'account/assets': 1,
                        'account/transferRecords': 1,
                    },
                    'post': {
                        'account/bills': 1,
                        'trade/orders': 1,
                        'trade/batch-orders': 1,
                        'trade/cancel-order': 1,
                        'trade/cancel-batch-orders': 1,
                        'trade/cancel-symbol-order': 1,
                        'trade/orderInfo': 1,
                        'trade/open-orders': 1,
                        'trade/history': 1,
                        'trade/fills': 1,
                    },
                },
            },
            'fees': {
                'trading': {
                    'tierBased': False,
                    'percentage': True,
                    'maker': self.parse_number('0.001'),
                    'taker': self.parse_number('0.001'),
                },
            },
            'precisionMode': TICK_SIZE,
            'exceptions': {
                'exact': {
                    '40001': AuthenticationError,  # Header "ACCESS_KEY" is required
                    '40002': AuthenticationError,  # Header "ACCESS_SIGN" is required
                    '40003': AuthenticationError,  # Header "ACCESS_TIMESTAMP" is required
                    '40005': InvalidNonce,  # Invalid ACCESS_TIMESTAMP
                    '40006': AuthenticationError,  # Invalid ACCESS_KEY
                    '40007': BadRequest,  # Invalid Content_Type, use "application/json" format
                    '40008': InvalidNonce,  # Request timestamp expired
                    '40009': AuthenticationError,  # API verification failed
                    '40011': AuthenticationError,  # Header "ACCESS_PASSPHRASE" is required
                    '40012': AuthenticationError,  # Incorrect API key/Passphrase
                    '40013': AccountSuspended,  # Account frozen
                    '40014': PermissionDenied,  # Invalid permissions
                    '40015': ExchangeError,  # System error
                    '40017': BadRequest,  # Parameter validation failed
                    '40018': PermissionDenied,  # Invalid IP request
                    '40102': BadSymbol,  # Trading pair configuration does not exist
                    '40200': OnMaintenance,  # The server is being upgraded. Please try again later.
                    '40305': InvalidOrder,  # client_oid exceeds 40 characters or is in an invalid format
                    '40409': BadRequest,  # Incorrect format
                    '40704': BadRequest,  # Only the last three months of historical data are accessible
                    '40707': BadRequest,  # Start time has a greater value than the end time
                    '40724': BadRequest,  # Empty parameter
                    '40725': BadRequest,  # Server returns an error response
                    '40912': BadRequest,  # Batch cancel limit exceeded(max 50 orders)
                    '40913': ArgumentsRequired,  # Either orderId or clientId is required
                    '43001': OrderNotFound,  # Order does not exist
                    '43002': InvalidOrder,  # Failed to place order
                    '43004': OrderNotFound,  # There are no orders that can be canceled.
                    '43005': InvalidOrder,  # Order quantity exceeds maximum order limit
                    '43006': InvalidOrder,  # Amount is less than the minimum order amount
                    '43007': InvalidOrder,  # Amount exceeds maximum order amount
                    '43009': InvalidOrder,  # The current order price exceeds the limit of 0
                    '43010': InvalidOrder,  # Trading volume cannot be less than 0
                    '43011': InvalidOrder,  # The current order price cannot be lower than 0
                    '429': RateLimitExceeded,  # Too Many Requests
                },
                'broad': {},
            },
            'commonCurrencies': {
                # Add any currency mappings if needed
            },
        })

    def fetch_time(self, params={}) -> Int:
        """
        fetches the current integer timestamp in milliseconds from the exchange server
        https://doc-en.weex.com/#get-server-time
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns int: the current integer timestamp in milliseconds from the exchange server
        """
        response = self.publicGetPublicTime(params)
        #
        #     {
        #         "code": "00000",
        #         "msg": "success",
        #         "requestTime": 1622097118135,
        #         "data": 1622097118134
        #     }
        #
        return self.safe_integer(response, 'data')

    def fetch_currencies(self, params={}) -> Currencies:
        """
        fetches all available currencies on an exchange
        https://doc-en.weex.com/#basic-crypto-information
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: an associative dictionary of currencies
        """
        response = self.publicGetPublicCurrencies(params)
        #
        #     {
        #         "code":"00000",
        #         "msg":"success",
        #         "requestTime":1622097139437,
        #         "data":[
        #             {
        #                 "coinId":"1",
        #                 "coinName":"BTC",
        #                 "transfer":"true",
        #                 "chains":[
        #                     {
        #                         "chain":null,
        #                         "needTag":"false",
        #                         "withdrawAble":"true",
        #                         "rechargeAble":"true",
        #                         "withdrawFee":"0.005",
        #                         "depositConfirm":"1",
        #                         "withdrawConfirm":"1",
        #                         "minDepositAmount":"0.001",
        #                         "minWithdrawAmount":"0.001",
        #                         "browserUrl":"https://blockchair.com/bitcoin/testnet/transaction/"
        #                     }
        #                 ]
        #             }
        #         ]
        #     }
        #
        data = self.safe_list(response, 'data', [])
        result: dict = {}
        for i in range(0, len(data)):
            currency = data[i]
            id = self.safe_string(currency, 'coinName')
            code = self.safe_currency_code(id)
            chains = self.safe_list(currency, 'chains', [])
            networks: dict = {}
            fee = None
            for j in range(0, len(chains)):
                chain = chains[j]
                networkId = self.safe_string(chain, 'chain')
                networkCode = networkId if networkId else id
                withdrawEnabled = self.safe_bool(chain, 'withdrawAble')
                depositEnabled = self.safe_bool(chain, 'rechargeAble')
                withdrawFee = self.safe_number(chain, 'withdrawFee')
                if fee is None:
                    fee = withdrawFee
                networks[networkCode] = {
                    'info': chain,
                    'id': networkId,
                    'network': networkCode,
                    'active': withdrawEnabled and depositEnabled,
                    'deposit': depositEnabled,
                    'withdraw': withdrawEnabled,
                    'fee': withdrawFee,
                    'precision': None,
                    'limits': {
                        'withdraw': {
                            'min': self.safe_number(chain, 'minWithdrawAmount'),
                            'max': None,
                        },
                        'deposit': {
                            'min': self.safe_number(chain, 'minDepositAmount'),
                            'max': None,
                        },
                    },
                }
            result[code] = {
                'info': currency,
                'id': id,
                'numericId': self.safe_string(currency, 'coinId'),
                'code': code,
                'precision': None,
                'type': None,
                'name': None,
                'active': None,
                'deposit': None,
                'withdraw': None,
                'networks': networks,
                'fee': fee,
                'limits': {
                    'amount': {
                        'min': None,
                        'max': None,
                    },
                },
            }
        return result

    def fetch_markets(self, params={}) -> List[Market]:
        """
        retrieves data on all markets for weex
        https://doc-en.weex.com/#get-symbol-info
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: an array of objects representing market data
        """
        response = self.publicGetPublicExchangeInfo(params)
        #
        #     {
        #       "code": "00000",
        #       "msg": "success",
        #       "requestTime": 1743661516052,
        #       "data": [
        #         {
        #           "symbol": "BTCUSDT_SPBL",
        #           "baseCoin": "BTC",
        #           "quoteCoin": "USDT",
        #           "tickSize": "0.1",
        #           "stepSize": "0.00000001",
        #           "minTradeAmount": "0.00001",
        #           "maxTradeAmount": "99999",
        #           "takerFeeRate": "0.001",
        #           "makerFeeRate": "0",
        #           "enableTrade": True,
        #           "enableDisplay": True
        #         }
        #       ]
        #     }
        #
        data = self.safe_list(response, 'data', [])
        result: List[Market] = []
        for i in range(0, len(data)):
            market = data[i]
            marketId = self.safe_string(market, 'symbol')
            baseId = self.safe_string(market, 'baseCoin')
            quoteId = self.safe_string(market, 'quoteCoin')
            base = self.safe_currency_code(baseId)
            quote = self.safe_currency_code(quoteId)
            symbol = base + '/' + quote
            active = self.safe_bool(market, 'enableTrade')
            tickSize = self.safe_string(market, 'tickSize')
            stepSize = self.safe_string(market, 'stepSize')
            result.append({
                'info': market,
                'id': marketId,
                'symbol': symbol,
                'base': base,
                'quote': quote,
                'settle': None,
                'baseId': baseId,
                'quoteId': quoteId,
                'settleId': None,
                'type': 'spot',
                'spot': True,
                'margin': False,
                'swap': False,
                'future': False,
                'option': False,
                'active': active,
                'contract': False,
                'linear': None,
                'inverse': None,
                'contractSize': None,
                'expiry': None,
                'expiryDatetime': None,
                'strike': None,
                'optionType': None,
                'precision': {
                    'amount': self.parse_number(stepSize),
                    'price': self.parse_number(tickSize),
                },
                'limits': {
                    'leverage': {
                        'min': None,
                        'max': None,
                    },
                    'amount': {
                        'min': self.safe_number(market, 'minTradeAmount'),
                        'max': self.safe_number(market, 'maxTradeAmount'),
                    },
                    'price': {
                        'min': None,
                        'max': None,
                    },
                    'cost': {
                        'min': None,
                        'max': None,
                    },
                },
                'created': None,
            })
        return result

    def fetch_ticker(self, symbol: Str, params={}) -> Ticker:
        """
        fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        https://doc-en.weex.com/#get-single-ticker
        :param str symbol: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
        }
        response = self.publicGetMarketTicker(self.extend(request, params))
        #
        #     {
        #       "code": "00000",
        #       "msg": "success",
        #       "requestTime": 1743665793483,
        #       "data": {
        #         "symbol": "BTCUSDT_SPBL",
        #         "priceChange": "-965.6",
        #         "priceChangePercent": "-0.011451",
        #         "trades": 105901,
        #         "size": "78570.57284800",
        #         "value": "6731333236.9492884000",
        #         "high": "88495.5",
        #         "low": "82175.9",
        #         "open": "84319.6",
        #         "close": "83354.0",
        #         "lastPrice": "83354.0",
        #         "ts": 1750060557824
        #       }
        #     }
        #
        data = self.safe_dict(response, 'data', {})
        return self.parse_ticker(data, market)

    def fetch_tickers(self, symbols: Strings = None, params={}) -> Tickers:
        """
        fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
        https://doc-en.weex.com/#get-all-ticker
        :param str[]|None symbols: unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a dictionary of `ticker structures <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        self.load_markets()
        response = self.publicGetMarketTickers(params)
        #
        #     {
        #       "code": "00000",
        #       "msg": "success",
        #       "data": [
        #         {
        #           "symbol": "BTCUSDT_SPBL",
        #           "priceChange": "-965.6",
        #           "priceChangePercent": "-0.011451",
        #           # ... more ticker data
        #         }
        #       ]
        #     }
        #
        data = self.safe_list(response, 'data', [])
        result: dict = {}
        for i in range(0, len(data)):
            ticker = self.parse_ticker(data[i])
            symbol = ticker['symbol']
            result[symbol] = ticker
        return self.filter_by_array_tickers(result, 'symbol', symbols)

    def parse_ticker(self, ticker: dict, market: Market = None) -> Ticker:
        #
        #     {
        #       "symbol": "BTCUSDT_SPBL",
        #       "priceChange": "-965.6",
        #       "priceChangePercent": "-0.011451",
        #       "trades": 105901,
        #       "size": "78570.57284800",
        #       "value": "6731333236.9492884000",
        #       "high": "88495.5",
        #       "low": "82175.9",
        #       "open": "84319.6",
        #       "close": "83354.0",
        #       "lastPrice": "83354.0",
        #       "ts": 1750060557824
        #     }
        #
        marketId = self.safe_string(ticker, 'symbol')
        symbol = self.safe_symbol(marketId, market)
        timestamp = self.safe_integer(ticker, 'ts')
        last = self.safe_string(ticker, 'lastPrice')
        open = self.safe_string(ticker, 'open')
        high = self.safe_string(ticker, 'high')
        low = self.safe_string(ticker, 'low')
        change = self.safe_string(ticker, 'priceChange')
        percentage = self.safe_string(ticker, 'priceChangePercent')
        baseVolume = self.safe_string(ticker, 'size')
        quoteVolume = self.safe_string(ticker, 'value')
        count = self.safe_integer(ticker, 'trades')
        return self.safe_ticker({
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'high': high,
            'low': low,
            'bid': None,
            'bidVolume': None,
            'ask': None,
            'askVolume': None,
            'vwap': None,
            'open': open,
            'close': last,
            'last': last,
            'previousClose': None,
            'change': change,
            'percentage': percentage,
            'average': None,
            'baseVolume': baseVolume,
            'quoteVolume': quoteVolume,
            'count': count,
            'info': ticker,
        }, market)

    def fetch_order_book(self, symbol: Str, limit: Int = None, params={}) -> OrderBook:
        """
        fetches information on open orders with bid(buy) and ask(sell) prices, volumes and other data
        https://doc-en.weex.com/#get-orderbook-depth
        :param str symbol: unified symbol of the market to fetch the order book for
        :param int [limit]: the maximum amount of order book entries to return(15 or 200)
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
        }
        if limit is not None:
            request['limit'] = limit  # 15 or 200
        response = self.publicGetMarketDepth(self.extend(request, params))
        #
        #     {
        #         "code":"00000",
        #         "msg":"success",
        #         "requestTime":1622102974025,
        #         "data":{
        #             "asks":[
        #                 ["38084.5","0.0039"],
        #                 ["38085.7","0.0018"]
        #             ],
        #             "bids":[
        #                 ["38073.7","0.4993000000000000"],
        #                 ["38073.4","0.4500"]
        #             ],
        #             "timestamp":"1622102974025"
        #         }
        #     }
        #
        data = self.safe_dict(response, 'data', {})
        timestamp = self.safe_integer(data, 'timestamp')
        return self.parse_order_book(data, symbol, timestamp)

    def fetch_trades(self, symbol: Str, since: Int = None, limit: Int = None, params={}) -> List[Trade]:
        """
        get the list of most recent trades for a particular symbol
        https://doc-en.weex.com/#get-trades
        :param str symbol: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum amount of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns Trade[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
        }
        if limit is not None:
            request['limit'] = limit
        response = self.publicGetMarketFills(self.extend(request, params))
        #
        #     {
        #         "code": "00000",
        #         "msg": "success",
        #         "requestTime": 1743668717640,
        #         "data": [
        #             {
        #                 "symbol": "BTCUSDT_SPBL",
        #                 "tradeId": "778a5376-a0b6-4c8f-ab64-dd6ea40f896e",
        #                 "fillTime": 1743668713364,
        #                 "fillPrice": "83609.7",
        #                 "fillQuantity": "0.00011400",
        #                 "tradeValue": "9.531505800",
        #                 "bestMatch": True,
        #                 "buyerMaker": True
        #             }
        #         ]
        #     }
        #
        data = self.safe_list(response, 'data', [])
        return self.parse_trades(data, market, since, limit)

    def parse_trade(self, trade: dict, market: Market = None) -> Trade:
        #
        # fetchTrades(public)
        #
        #     {
        #         "symbol": "BTCUSDT_SPBL",
        #         "tradeId": "778a5376-a0b6-4c8f-ab64-dd6ea40f896e",
        #         "fillTime": 1743668713364,
        #         "fillPrice": "83609.7",
        #         "fillQuantity": "0.00011400",
        #         "tradeValue": "9.531505800",
        #         "bestMatch": True,
        #         "buyerMaker": True
        #     }
        #
        # fetchMyTrades(private)
        #
        #     {
        #         "accountId": "590105411156181178",
        #         "symbol": "WXTUSDT_SPBL",
        #         "baseCoin": "WXT",
        #         "quoteCoin": "USDT",
        #         "orderId": "602929507946463674",
        #         "fillId": "602929507971629498",
        #         "orderType": "",
        #         "side": "buy",
        #         "fillPrice": "",
        #         "fillQuantity": "10",
        #         "fillTotalAmount": "0.10476",
        #         "fees": "0.01",
        #         "cTime": "1743749596589"
        #     }
        #
        marketId = self.safe_string(trade, 'symbol')
        symbol = self.safe_symbol(marketId, market)
        id = self.safe_string_2(trade, 'tradeId', 'fillId')
        orderId = self.safe_string(trade, 'orderId')
        timestamp = self.safe_integer_2(trade, 'fillTime', 'cTime')
        priceString = self.safe_string_2(trade, 'fillPrice', 'fillPrice')
        amountString = self.safe_string(trade, 'fillQuantity')
        costString = self.safe_string_2(trade, 'tradeValue', 'fillTotalAmount')
        side = self.safe_string(trade, 'side')
        takerOrMaker = None
        buyerMaker = self.safe_bool(trade, 'buyerMaker')
        if buyerMaker is not None:
            takerOrMaker = 'maker' if buyerMaker else 'taker'
        feeString = self.safe_string(trade, 'fees')
        fee = None
        if feeString is not None:
            fee = {
                'cost': feeString,
                'currency': None,
            }
        return self.safe_trade({
            'info': trade,
            'id': id,
            'order': orderId,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'symbol': symbol,
            'type': None,
            'side': side,
            'amount': amountString,
            'price': priceString,
            'cost': costString,
            'takerOrMaker': takerOrMaker,
            'fee': fee,
        }, market)

    def fetch_ohlcv(self, symbol: Str, timeframe='1m', since: Int = None, limit: Int = None, params={}) -> List[list]:
        """
        fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        https://doc-en.weex.com/#get-candlestick-data
        :param str symbol: unified symbol of the market to fetch OHLCV data for
        :param str timeframe: the length of time each candle represents
        :param int [since]: timestamp in ms of the earliest candle to fetch
        :param int [limit]: the maximum amount of candles to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns int[][]: A list of candles ordered, open, high, low, close, volume
        """
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
            'period': self.safe_string(self.timeframes, timeframe, timeframe),
        }
        if limit is not None:
            request['limit'] = limit
        response = self.publicGetMarketCandles(self.extend(request, params))
        #
        #     {
        #       "code": "00000",
        #       "msg": "success",
        #       "requestTime": 1743669821003,
        #       "data": [
        #         [
        #           1743669000000,
        #           "83654.0",
        #           "83778.0",
        #           "83531.5",
        #           "83688.7",
        #           "248.17024800",
        #           "20755885.859164900"
        #         ]
        #       ]
        #     }
        #
        data = self.safe_list(response, 'data', [])
        return self.parse_ohlcvs(data, market, timeframe, since, limit)

    def parse_ohlcv(self, ohlcv, market: Market = None) -> list:
        #
        #     [
        #       1743669000000,
        #       "83654.0",
        #       "83778.0",
        #       "83531.5",
        #       "83688.7",
        #       "248.17024800",
        #       "20755885.859164900"
        #     ]
        #
        return [
            self.safe_integer(ohlcv, 0),
            self.safe_number(ohlcv, 1),
            self.safe_number(ohlcv, 2),
            self.safe_number(ohlcv, 3),
            self.safe_number(ohlcv, 4),
            self.safe_number(ohlcv, 5),
        ]

    def fetch_balance(self, params={}) -> Balances:
        """
        query for balance and get the amount of funds available for trading or funds locked in orders
        https://doc-en.weex.com/#get-account-assets
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `balance structure <https://docs.ccxt.com/#/?id=balance-structure>`
        """
        self.load_markets()
        response = self.privateGetAccountAssets(params)
        #
        #     {
        #       "code": "00000",
        #       "msg": "success",
        #       "requestTime": 1743729400189,
        #       "data": [{
        #         "coinId": 1,
        #         "coinName": "BTC",
        #         "available": "0.0040000000000000",
        #         "frozen": "0",
        #         "equity": "0.0040000000000000"
        #       }, {
        #         "coinId": 2,
        #         "coinName": "USDT",
        #         "available": "10000999657.8927028500000000",
        #         "frozen": "0",
        #         "equity": "10000999657.8927028500000000"
        #       }]
        #     }
        #
        data = self.safe_list(response, 'data', [])
        return self.parse_balance(data)

    def parse_balance(self, response: dict) -> Balances:
        result: dict = {
            'info': response,
            'timestamp': None,
            'datetime': None,
        }
        for i in range(0, len(response)):
            balance = response[i]
            currencyId = self.safe_string(balance, 'coinName')
            code = self.safe_currency_code(currencyId)
            account = self.account()
            account['free'] = self.safe_string(balance, 'available')
            account['used'] = self.safe_string(balance, 'frozen')
            account['total'] = self.safe_string(balance, 'equity')
            result[code] = account
        return self.safe_balance(result)

    def create_order(self, symbol: Str, type: OrderType, side: OrderSide, amount: Num, price: Num = None, params={}) -> Order:
        """
        create a trade order
        https://doc-en.weex.com/#place-order
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much of currency you want to trade in units of base currency
        :param float [price]: the price at which the order is to be fulfilled, in units of the quote currency, ignored in market orders
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.clientOrderId]: client order id, defaults to uuid if not passed
        :param str [params.force]: order execution type: 'normal', 'postOnly', 'fok', 'ioc'
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
            'side': side,
            'orderType': type,
            'quantity': self.amount_to_precision(symbol, amount),
        }
        clientOrderId = self.safe_string(params, 'clientOrderId', self.uuid())
        request['clientOrderId'] = clientOrderId
        if type == 'limit':
            if price is None:
                raise ArgumentsRequired(self.id + ' createOrder() requires a price argument for limit orders')
            request['price'] = self.price_to_precision(symbol, price)
        force = self.safe_string(params, 'force', 'normal')
        request['force'] = force
        params = self.omit(params, ['clientOrderId', 'force'])
        response = self.privatePostTradeOrders(self.extend(request, params))
        #
        #     {
        #       "code": "00000",
        #       "msg": "success",
        #       "requestTime": 1743736915184,
        #       "data": {
        #         "orderId": 602876318261969338,
        #         "clientOrderId": "202504041121509751743736910566"
        #       }
        #     }
        #
        data = self.safe_dict(response, 'data', {})
        return self.parse_order(data, market)

    def cancel_order(self, id: Str, symbol: Str = None, params={}) -> Order:
        """
        cancels an open order
        https://doc-en.weex.com/#cancel-order
        :param str id: order id
        :param str symbol: unified symbol of the market the order was made in
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.clientOrderId]: client order id
        :returns dict: An `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        if symbol is None:
            raise ArgumentsRequired(self.id + ' cancelOrder() requires a symbol argument')
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
        }
        clientOrderId = self.safe_string(params, 'clientOrderId')
        if clientOrderId is not None:
            request['clientOid'] = clientOrderId
        else:
            request['orderId'] = id
        params = self.omit(params, ['clientOrderId'])
        response = self.privatePostTradeCancelOrder(self.extend(request, params))
        #
        #     {
        #       "code": "00000",
        #       "msg": "success",
        #       "requestTime": 1743740792018,
        #       "data": {
        #         "order_id": "602882076026339770",
        #         "client_oid": null,
        #         "symbol": "WXTUSDT_SPBL",
        #         "result": True,
        #         "err_code": null,
        #         "err_msg": null
        #       }
        #     }
        #
        data = self.safe_dict(response, 'data', {})
        return self.parse_order(data, market)

    def fetch_order(self, id: Str, symbol: Str = None, params={}) -> Order:
        """
        fetches information on an order made by the user
        https://doc-en.weex.com/#get-order-info
        :param str id: the order id
        :param str symbol: unified symbol of the market the order was made in
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.clientOrderId]: client order id
        :returns dict: An `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.load_markets()
        market = self.market(symbol)
        request: dict = {}
        clientOrderId = self.safe_string(params, 'clientOrderId')
        if clientOrderId is not None:
            request['clientOrderId'] = clientOrderId
        else:
            request['orderId'] = id
        params = self.omit(params, ['clientOrderId'])
        response = self.privatePostTradeOrderInfo(self.extend(request, params))
        #
        #     {
        #       "code": "00000",
        #       "msg": "success",
        #       "requestTime": 1743754256238,
        #       "data": [{
        #         "accountId": "590105411156181178",
        #         "symbol": "WXTUSDT_SPBL",
        #         "orderId": "602928955330134458",
        #         "clientOrderId": "202504041451014391743749461316",
        #         "price": "100.000000",
        #         "quantity": "10",
        #         "orderType": "limit",
        #         "side": "sell",
        #         "status": "open",
        #         "latestFillPrice": "0",
        #         "maxFillPrice": "0",
        #         "minFillPrice": "0",
        #         "fillQuantity": "0",
        #         "fillTotalAmount": "0",
        #         "cTime": "1743749464829",
        #         "uTime": "1743749464834"
        #       }]
        #     }
        #
        data = self.safe_list(response, 'data', [])
        first = self.safe_dict(data, 0, {})
        return self.parse_order(first, market)

    def parse_order(self, order: dict, market: Market = None) -> Order:
        #
        # createOrder
        #
        #     {
        #       "orderId": 602876318261969338,
        #       "clientOrderId": "202504041121509751743736910566"
        #     }
        #
        # cancelOrder
        #
        #     {
        #       "order_id": "602882076026339770",
        #       "client_oid": null,
        #       "symbol": "WXTUSDT_SPBL",
        #       "result": True,
        #       "err_code": null,
        #       "err_msg": null
        #     }
        #
        # fetchOrder, fetchOrders, fetchOpenOrders
        #
        #     {
        #       "accountId": "590105411156181178",
        #       "symbol": "WXTUSDT_SPBL",
        #       "orderId": "602928955330134458",
        #       "clientOrderId": "202504041451014391743749461316",
        #       "price": "100.000000",
        #       "quantity": "10",
        #       "orderType": "limit",
        #       "side": "sell",
        #       "status": "open",
        #       "latestFillPrice": "0",
        #       "maxFillPrice": "0",
        #       "minFillPrice": "0",
        #       "fillQuantity": "0",
        #       "fillTotalAmount": "0",
        #       "cTime": "1743749464829",
        #       "uTime": "1743749464834"
        #     }
        #
        marketId = self.safe_string(order, 'symbol')
        symbol = self.safe_symbol(marketId, market)
        id = self.safe_string_2(order, 'orderId', 'order_id')
        clientOrderId = self.safe_string_2(order, 'clientOrderId', 'client_oid')
        timestamp = self.safe_integer(order, 'cTime')
        lastUpdateTimestamp = self.safe_integer(order, 'uTime')
        type = self.safe_string(order, 'orderType')
        side = self.safe_string(order, 'side')
        amount = self.safe_string(order, 'quantity')
        price = self.safe_string(order, 'price')
        filled = self.safe_string(order, 'fillQuantity')
        cost = self.safe_string(order, 'fillTotalAmount')
        average = self.safe_string(order, 'latestFillPrice')
        status = self.safe_string(order, 'status')
        if status == 'new':
            status = 'open'
        elif status == 'partial_fill':
            status = 'open'
        elif status == 'full_fill':
            status = 'closed'
        elif status == 'cancelled':
            status = 'canceled'
        return self.safe_order({
            'info': order,
            'id': id,
            'clientOrderId': clientOrderId,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'lastTradeTimestamp': lastUpdateTimestamp,
            'lastUpdateTimestamp': lastUpdateTimestamp,
            'symbol': symbol,
            'type': type,
            'timeInForce': None,
            'postOnly': None,
            'side': side,
            'amount': amount,
            'price': price,
            'stopPrice': None,
            'triggerPrice': None,
            'cost': cost,
            'average': average,
            'filled': filled,
            'remaining': None,
            'status': status,
            'fee': None,
            'trades': None,
        }, market)

    def fetch_open_orders(self, symbol: Str = None, since: Int = None, limit: Int = None, params={}) -> List[Order]:
        """
        fetch all unfilled currently open orders
        https://doc-en.weex.com/#get-current-orders
        :param str symbol: unified market symbol
        :param int [since]: the earliest time in ms to fetch open orders for
        :param int [limit]: the maximum number of  open orders structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param int [params.pageNo]: page number(starting from 0, default 0)
        :returns Order[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchOpenOrders() requires a symbol argument')
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
        }
        if limit is not None:
            request['limit'] = limit
        pageNo = self.safe_integer(params, 'pageNo')
        if pageNo is not None:
            request['pageNo'] = pageNo
        params = self.omit(params, ['pageNo'])
        response = self.privatePostTradeOpenOrders(self.extend(request, params))
        #
        #     {
        #       "code": "00000",
        #       "msg": "success",
        #       "requestTime": 1743753174247,
        #       "data": {
        #         "orderInfoResultList": [{
        #           "accountId": "590105411156181178",
        #           "symbol": "WXTUSDT_SPBL",
        #           "orderId": "602941812964852154",
        #           "clientOrderId": "202504040742105191743752530280",
        #           # ... more order data
        #         }],
        #         "nextPage": null,
        #         "totals": null
        #       }
        #     }
        #
        data = self.safe_dict(response, 'data', {})
        orders = self.safe_list(data, 'orderInfoResultList', [])
        return self.parse_orders(orders, market, since, limit)

    def fetch_orders(self, symbol: Str = None, since: Int = None, limit: Int = None, params={}) -> List[Order]:
        """
        fetches information on multiple orders made by the user
        https://doc-en.weex.com/#get-history-orders
        :param str symbol: unified market symbol of the market orders were made in
        :param int [since]: the earliest time in ms to fetch orders for
        :param int [limit]: the maximum number of order structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param int [params.after]: start timestamp(in milliseconds)
        :param int [params.before]: end timestamp(in milliseconds)
        :param int [params.pageIndex]: page number, starting from 0(Default: 0)
        :param int [params.pageSize]: page size, must be greater than 0 and less than or equal to 100(Default: 10)
        :returns Order[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchOrders() requires a symbol argument')
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
        }
        if since is not None:
            request['after'] = since
        if limit is not None:
            request['pageSize'] = limit
        response = self.privatePostTradeHistory(self.extend(request, params))
        #
        #     {
        #       "code": "00000",
        #       "msg": "success",
        #       "requestTime": 1743755234949,
        #       "data": {
        #         "orderInfoResultList": [{
        #           "accountId": "590105411156181178",
        #           "symbol": "WXTUSDT_SPBL",
        #           "orderId": "602941812964852154",
        #           # ... more order data
        #         }],
        #         "nextPage": True,
        #         "totals": 0
        #       }
        #     }
        #
        data = self.safe_dict(response, 'data', {})
        orders = self.safe_list(data, 'orderInfoResultList', [])
        return self.parse_orders(orders, market, since, limit)

    def fetch_my_trades(self, symbol: Str = None, since: Int = None, limit: Int = None, params={}) -> List[Trade]:
        """
        fetch all trades made by the user
        https://doc-en.weex.com/#get-fills
        :param str symbol: unified market symbol
        :param int [since]: the earliest time in ms to fetch trades for
        :param int [limit]: the maximum number of trades structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.orderId]: order id
        :param int [params.after]: start timestamp(in milliseconds)
        :param int [params.before]: end timestamp(in milliseconds)
        :param int [params.pageIndex]: page number, starting from 0(Default: 0)
        :param int [params.pageSize]: page size, must be greater than 0 and less than or equal to 100(Default: 10)
        :returns Trade[]: a list of `trade structures <https://docs.ccxt.com/#/?id=trade-structure>`
        """
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchMyTrades() requires a symbol argument')
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
        }
        if since is not None:
            request['after'] = since
        if limit is not None:
            request['pageSize'] = limit
        response = self.privatePostTradeFills(self.extend(request, params))
        #
        #     {
        #       "code": "00000",
        #       "msg": "success",
        #       "requestTime": 1743750228305,
        #       "data": {
        #         "fillsOrderResultList": [{
        #           "accountId": "590105411156181178",
        #           "symbol": "WXTUSDT_SPBL",
        #           "baseCoin": "WXT",
        #           "quoteCoin": "USDT",
        #           "orderId": "602929507946463674",
        #           "fillId": "602929507971629498",
        #           "orderType": "",
        #           "side": "buy",
        #           "fillPrice": "",
        #           "fillQuantity": "10",
        #           "fillTotalAmount": "0.10476",
        #           "fees": "0.01",
        #           "cTime": "1743749596589"
        #         }],
        #         "nextPage": False,
        #         "totals": 0
        #       }
        #     }
        #
        data = self.safe_dict(response, 'data', {})
        trades = self.safe_list(data, 'fillsOrderResultList', [])
        return self.parse_trades(trades, market, since, limit)

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None) -> dict:
        url = self.urls['api'][api] + '/' + path
        if api == 'public':
            if params:
                url += '?' + self.urlencode(params)
        elif api == 'private':
            self.check_required_credentials()
            timestamp = str(self.milliseconds())
            queryString = ''
            if method == 'GET':
                if params:
                    queryString = '?' + self.urlencode(params)
                    url += queryString
            else:
                if params:
                    body = self.json(params)
            auth = timestamp + method.upper() + '/' + path
            message = auth + queryString + (body or '') if queryString else auth + (body or '')
            signature = self.hmac(self.encode(message), self.encode(self.secret), hashlib.sha256, 'base64')
            headers = {
                'ACCESS-KEY': self.apiKey,
                'ACCESS-SIGN': signature,
                'ACCESS-TIMESTAMP': timestamp,
                'ACCESS-PASSPHRASE': self.password,
                'Content-Type': 'application/json',
                'locale': 'en-US',
            }
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def handle_errors(self, httpCode: int, reason: Str, url: Str, method: Str, headers: dict, body: Str, response: dict, requestHeaders: dict, requestBody: Str) -> void:
        if response is None:
            return  # fallback to default error handler
        #
        #     {
        #         "code": "40001",
        #         "msg": "Header \"ACCESS_KEY\" is required",
        #         "requestTime": 1622097118135
        #     }
        #
        code = self.safe_string(response, 'code')
        message = self.safe_string(response, 'msg')
        if code is not None and code != '00000':
            feedback = self.id + ' ' + body
            self.throw_exactly_matched_exception(self.exceptions['exact'], code, feedback)
            self.throw_broadly_matched_exception(self.exceptions['broad'], message, feedback)
            raise ExchangeError(feedback)  # unknown message
